version: '3.8'

services:
  # Infrastructure services
  redis:
    image: redis:7-alpine
    container_name: mlbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mlbot-network

  # Application services
  ingestor:
    build:
      context: .
      target: ingestor
    container_name: mlbot-ingestor
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS__HOST=redis
      - BYBIT__TESTNET=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mlbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  feature-hub:
    build:
      context: .
      target: feature-hub
    container_name: mlbot-feature-hub
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS__HOST=redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mlbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  model-server:
    build:
      context: .
      target: model-server
    container_name: mlbot-model-server
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - REDIS__HOST=redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./config:/app/config
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mlbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  order-router:
    build:
      context: .
      target: order-router
    container_name: mlbot-order-router
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - REDIS__HOST=redis
      - BYBIT__TESTNET=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      redis:
        condition: service_healthy
      model-server:
        condition: service_healthy
    networks:
      - mlbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: mlbot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlbot-network

  grafana:
    image: grafana/grafana:latest
    container_name: mlbot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mlbot-network

networks:
  mlbot-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data: