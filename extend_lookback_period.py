#!/usr/bin/env python3
"""
Script to extend the lookback period in the enhanced feature generator
This will help achieve 50%+ confidence by using more historical data
"""

import shutil
import re
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def extend_lookback_period(days=120):
    """Modify the enhanced generator to use extended lookback period."""
    
    file_path = 'improved_feature_generator_enhanced.py'
    backup_path = f'{file_path}.backup_lookback'
    
    # Create backup
    shutil.copy(file_path, backup_path)
    logger.info(f"Created backup: {backup_path}")
    
    # Read the file
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Replace lookback_days default value
    original_pattern = r'def load_historical_data\(self, symbol: str, lookback_days: int = 60\)'
    new_pattern = f'def load_historical_data(self, symbol: str, lookback_days: int = {days})'
    
    content = re.sub(original_pattern, new_pattern, content)
    
    # Also update the cache update method to use the same period
    cache_pattern = r'df = self\.load_historical_data\(symbol\)'
    cache_replacement = f'df = self.load_historical_data(symbol, lookback_days={days})'
    
    content = re.sub(cache_pattern, cache_replacement, content)
    
    # Write back
    with open(file_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Updated lookback period to {days} days")
    logger.info("Changes made:")
    logger.info(f"  - Default lookback_days: 60 → {days}")
    logger.info(f"  - Cache update now uses {days} days of history")
    
    return True


def verify_data_availability():
    """Check if we have enough historical data for extended lookback."""
    import duckdb
    from datetime import datetime, timedelta
    
    conn = duckdb.connect('data/historical_data.duckdb', read_only=True)
    
    try:
        # Check data availability
        result = conn.execute("""
            SELECT 
                symbol,
                COUNT(*) as records,
                MIN(datetime(open_time/1000, 'unixepoch')) as min_date,
                MAX(datetime(open_time/1000), 'unixepoch')) as max_date,
                (MAX(open_time) - MIN(open_time)) / (1000.0 * 60 * 60 * 24) as days_available
            FROM all_klines
            GROUP BY symbol
        """).fetchall()
        
        logger.info("\nData availability check:")
        sufficient_data = True
        
        for row in result:
            symbol, records, min_date, max_date, days = row
            logger.info(f"  {symbol}: {records:,} records, {days:.1f} days available")
            logger.info(f"    Date range: {min_date} to {max_date}")
            
            if days < 120:
                logger.warning(f"    ⚠️  {symbol} has less than 120 days of data")
                sufficient_data = False
            else:
                logger.info(f"    ✅ Sufficient data for 120-day lookback")
        
        return sufficient_data
        
    finally:
        conn.close()


def create_optimized_config():
    """Create an optimized configuration file for high confidence."""
    
    config = """
# Optimized Configuration for 50%+ Confidence
# Generated by extend_lookback_period.py

# Feature Generator Settings
LOOKBACK_DAYS = 120  # Extended from 60 to use more historical data
CACHE_UPDATE_INTERVAL = 300  # 5 minutes
PRELOAD_WINDOW = 200  # Increased from 100 for better calculations

# Redis Integration
ENABLE_REDIS = True  # Keep real-time updates active
REDIS_UPDATE_RECORDS = 200  # Increased from 100

# Trading Bot Settings
MIN_CONFIDENCE = 0.50  # 50% threshold
SIGNAL_COOLDOWN = 300  # 5 minutes between signals

# Recommendations:
# 1. Run update_duckdb_enhanced.py first to ensure data is current
# 2. Restart the bot after applying these changes
# 3. Monitor confidence levels - should see improvement to 50%+
# 4. If still below 50%, consider increasing LOOKBACK_DAYS to 180
"""
    
    with open('optimized_config.txt', 'w') as f:
        f.write(config)
    
    logger.info("\nCreated optimized_config.txt with recommended settings")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Extend lookback period for higher confidence')
    parser.add_argument('--days', type=int, default=120, 
                        help='Lookback period in days (default: 120)')
    parser.add_argument('--check-only', action='store_true',
                        help='Only check data availability without making changes')
    
    args = parser.parse_args()
    
    logger.info(f"Extending lookback period to {args.days} days...\n")
    
    # Check data availability
    has_data = verify_data_availability()
    
    if args.check_only:
        if has_data:
            logger.info("\n✅ Sufficient historical data available for extended lookback")
        else:
            logger.warning("\n⚠️  Some symbols may not have enough historical data")
            logger.info("Run update_duckdb_enhanced.py first to merge all historical data")
    else:
        if has_data or input("\nProceed with limited data? (y/n): ").lower() == 'y':
            # Extend lookback period
            if extend_lookback_period(args.days):
                logger.info("\n✅ Successfully extended lookback period!")
                
                # Create optimized config
                create_optimized_config()
                
                logger.info("\nNext steps:")
                logger.info("1. Deploy the updated generator to EC2")
                logger.info("2. Restart the bot to use new lookback period")
                logger.info("3. Monitor for improved confidence levels (50%+)")
        else:
            logger.info("\nCancelled. Run update_duckdb_enhanced.py first.")